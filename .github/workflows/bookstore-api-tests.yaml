name: Bookstore API Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Test tags to run (e.g. positive, negative, edge)'
        required: false
        default: ''
      baseUrl:
        description: 'Base URL for API'
        required: false
        default: 'https://fakerestapi.azurewebsites.net'
  schedule:
    - cron: '0 2 * * *' # Nightly job at 2 AM UTC

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Cache Maven dependencies (optional, uncomment if needed)
      # - name: Cache Maven packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-maven-

      # 4. Clean previous Allure outputs
      - name: Clean previous Allure outputs
        if: always()
        run: |
          rm -rf ./allure-results || true
          rm -rf ./allure-report || true

      # 5. Build Docker image for the test framework
      - name: Build Docker image
        run: docker build -t bookstore-api-tests .

      # 6. Run tests inside container
      - name: Run tests
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tags }}" ]; then
            echo "Running tests with tags: ${{ github.event.inputs.tags }}"
            docker run --name bookstore-tests \
              -e TAGS=${{ github.event.inputs.tags }} \
              -e BASE_URL=${{ github.event.inputs.baseUrl }} \
              bookstore-api-tests
          else
            echo "Running full test suite"
            docker run --name bookstore-tests \
              -e BASE_URL=https://fakerestapi.azurewebsites.net \
              bookstore-api-tests
          fi

      # 7. Stop and remove Docker container (ensure results are finalized)
      - name: Cleanup container
        if: always()
        run: docker rm -f bookstore-tests || true

      # 8. Copy Allure test results from container to host
      - name: Copy Allure results
        if: always()
        run: docker cp bookstore-tests:/app/target/allure-results ./allure-results || true

      # 9. Generate Allure HTML report
      - name: Generate Allure HTML report
        run: |
          npm install -g allure-commandline --save-dev
          allure generate ./allure-results --clean -o ./allure-report

      # 10. Deploy Allure report to GitHub Pages
      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      # 11. Print Allure report link
      - name: Show Allure Report Link
        run: |
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/"
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/"