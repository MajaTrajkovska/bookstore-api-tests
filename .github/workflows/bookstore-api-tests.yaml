name: Bookstore API Tests

on:
  # Run workflow on every push/merge to main
  push:
    branches: [ main ]   

  # Run workflow on PR creation/updates targeting main
  pull_request:
    branches: [ main ]  

  # Allow manual trigger from GitHub Actions UI 
  workflow_dispatch:      
    inputs:
      tags:
        description: 'Test tags to run (e.g. positive, negative, edge)'
        required: false
        default: ''
      baseUrl:
        description: 'Base URL for API'
        required: false
        default: 'https://fakerestapi.azurewebsites.net'

  # Nightly job: Run all tests at 2 AM UTC every day
  schedule:
    - cron: '0 2 * * *'


jobs:
  # ===================================================
  # JOB 1 - Run full test suite on push to main
  # ===================================================
    run-all-tests:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Run All Tests (Push/PR)

    steps:
      # 1. Checkout repository
      - uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - uses: docker/setup-buildx-action@v3

      # 3. Build Docker image
      - run: docker build -t bookstore-api-tests .

      # 4. Clean previous results
      - run: rm -rf ./allure-results ./allure-report || true

      # 5. Run all tests
      - run: |
          echo "Running full test suite"
          docker run --name bookstore-tests \
            -e BASE_URL=https://fakerestapi.azurewebsites.net \
            bookstore-api-tests

      # 6. Copy results from container
      - run: docker cp bookstore-tests:/app/target/allure-results ./allure-results

      # 7. Clean container
      - run: docker rm -f bookstore-tests || true

      # 8. Generate Allure report
      - run: |
          npm install -g allure-commandline --save-dev
          allure generate ./allure-results --clean -o ./allure-report

      # 9. Deploy report
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      # 10. Print Allure report link
      - name: Show Allure Report Link
        if: always()
        run: |
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/"
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/" >> $GITHUB_STEP_SUMMARY

  # ===================================================
  # JOB 2 - Run tagged tests manually
  # ===================================================
    run-tagged-tests:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - uses: docker/setup-buildx-action@v3

      # 3. Build Docker image
      - run: docker build -t bookstore-api-tests .

      # 4. Clean previous results
      - run: rm -rf ./allure-results ./allure-report || true

      # 5. Run tests with given tags
      - run: |
          if [ -n "${{ github.event.inputs.tags }}" ]; then
            echo "Running tests with tags: ${{ github.event.inputs.tags }}"
            docker run --name bookstore-tests \
              -e TAGS=${{ github.event.inputs.tags }} \
              -e BASE_URL=${{ github.event.inputs.baseUrl }} \
              bookstore-api-tests
          else
            echo "No tags provided. Running full suite."
            docker run --name bookstore-tests \
              -e BASE_URL=${{ github.event.inputs.baseUrl }} \
              bookstore-api-tests
          fi

      # 6. Copy results from container
      - run: docker cp bookstore-tests:/app/target/allure-results ./allure-results

      # 7. Clean container
      - run: docker rm -f bookstore-tests || true

      # 8. Generate Allure report
      - run: |
          npm install -g allure-commandline --save-dev
          allure generate ./allure-results --clean -o ./allure-report

      # 9. Deploy report
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      # 10. Print Allure report link
      - name: Show Allure Report Link
        if: always()
        run: |
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/"
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/" >> $GITHUB_STEP_SUMMARY


  # ===================================================
  # JOB 3 - Scheduled nightly job
  # ===================================================
    nightly-tests:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - uses: docker/setup-buildx-action@v3

      # 3. Build Docker image
      - run: docker build -t bookstore-api-tests .

      # 4. Clean previous results
      - run: rm -rf ./allure-results ./allure-report || true

      # 5. Run all tests
      - run: |
          echo "Running nightly full test suite"
          docker run --name bookstore-tests \
            -e BASE_URL=https://fakerestapi.azurewebsites.net \
            bookstore-api-tests

      # 6. Copy results from container
      - run: docker cp bookstore-tests:/app/target/allure-results ./allure-results

      # 7. Clean container
      - run: docker rm -f bookstore-tests || true

      # 8. Generate Allure report
      - run: |
          npm install -g allure-commandline --save-dev
          allure generate ./allure-results --clean -o ./allure-report

      # 9. Deploy report
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      # 10. Print Allure report link
      - name: Show Allure Report Link
        if: always()
        run: |
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/"
          echo "Here is your report: https://MajaTrajkovska.github.io/bookstore-api-tests/" >> $GITHUB_STEP_SUMMARY
